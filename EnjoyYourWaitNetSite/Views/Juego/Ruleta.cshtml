@{
    ViewBag.Title = "Ruleta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Content/css/ruleta.css" type="text/css" />
<script type="text/javascript" src="~/Scripts/Winwheel.js"></script>
<script type="text/javascript" src="~/Scripts/TweenMax.min.js"></script>

<h2>@ViewBag.Title.</h2>

<p>Bienvenido, ¿jugamos?</p>

<div class="row">
    <div class="col-sm-4 power_controls"> 
         <table class="power" cellpadding="10" cellspacing="0">
                        <tr>
                            <th align="center">Poder</th>
                        </tr>
                        <tr>
                            <td width="78" align="center" id="pw3" onClick="powerSelected(3);">Alto</td>
                        </tr>
                        <tr>
                            <td align="center" id="pw2" onClick="powerSelected(2);">Medio</td>
                        </tr>
                        <tr>
                            <td align="center" id="pw1" onClick="powerSelected(1);">Bajo</td>
                        </tr>
         </table>
         <br />
         <img id="spin_button" src="~/Content/img/ruleta/spin_off.png" alt="Spin" onClick="startSpin();" />
         <br /><br />
         <a href="#" onClick="resetWheel(); return false;">Jugar de nuevo</a>
    </div>
    <div width="438" height="582" class="col-sm-8 the_wheel" align="center" valign="center">
         <canvas id="canvas" width="434" height="434">
              <p style="{color: white}" align="center">Lo sentimos, tu navegador no soporta canvas. Proba ingresando desde otro.</p>
         </canvas>
    </div>    
   
</div>
<script>
        // Create new wheel object specifying the parameters at creation time.
    let theWheel = new Winwheel({
        'numSegments': 14,   // Specify number of segments.
        'outerRadius': 212,  // Set radius to so wheel fits the background.
        'innerRadius': 120,  // Set inner radius to make wheel hollow.
        'textFontSize': 16,   // Set font size accordingly.
        'textMargin': 0,    // Take out default margin.
        'segments':       // Define segments including colour and text.
            [
                { 'fillStyle': 'blue', 'text': 'sonrisa' },
                { 'fillStyle': 'lightblue', 'text': 'descuento' },
                { 'fillStyle': 'green', 'text': 'osito' },
                { 'fillStyle': 'yellow', 'text': 'bebida' },
                { 'fillStyle': 'orange', 'text': 'helado' },
                { 'fillStyle': 'red', 'text': 'nada' },
                { 'fillStyle': 'violet', 'text': 'cubiertos' },
                { 'fillStyle': 'blue', 'text': 'cafe' },
                { 'fillStyle': 'lightblue', 'text': 'nada' },
                { 'fillStyle': 'green', 'text': 'helado' },
                { 'fillStyle': 'yellow', 'text': 'descuento' },
                { 'fillStyle': 'orange', 'text': 'descuento' },
                { 'fillStyle': 'red', 'text': 'nada' },
                { 'fillStyle': 'violet', 'text': 'cafe' }
            ],
        'animation':           // Define spin to stop animation.
        {
            'type': 'spinToStop',
            'duration': 5,
            'spins': 8,
            'callbackFinished': alertPrize
        }
    });

    // Vars used by the code in this page to do power controls.
    let wheelPower = 0;
    let wheelSpinning = false;

    // -------------------------------------------------------
    // Function to handle the onClick on the power buttons.
    // -------------------------------------------------------
    function powerSelected(powerLevel) {
        // Ensure that power can't be changed while wheel is spinning.
        if (wheelSpinning == false) {
            // Reset all to grey incase this is not the first time the user has selected the power.
            document.getElementById('pw1').className = "";
            document.getElementById('pw2').className = "";
            document.getElementById('pw3').className = "";

            // Now light up all cells below-and-including the one selected by changing the class.
            if (powerLevel >= 1) {
                document.getElementById('pw1').className = "pw1";
            }

            if (powerLevel >= 2) {
                document.getElementById('pw2').className = "pw2";
            }

            if (powerLevel >= 3) {
                document.getElementById('pw3').className = "pw3";
            }

            // Set wheelPower var used when spin button is clicked.
            wheelPower = powerLevel;

            // Light up the spin button by changing it's source image and adding a clickable class to it.
            document.getElementById('spin_button').src = "/Content/img/ruleta/spin_on.png";
            document.getElementById('spin_button').className = "clickable";
        }
    }

    // -------------------------------------------------------
    // Click handler for spin button.
    // -------------------------------------------------------
    function startSpin() {
        // Ensure that spinning can't be clicked again while already running.
        if (wheelSpinning == false) {
            // Based on the power level selected adjust the number of spins for the wheel, the more times is has
            // to rotate with the duration of the animation the quicker the wheel spins.
            if (wheelPower == 1) {
                theWheel.animation.spins = 3;
            } else if (wheelPower == 2) {
                theWheel.animation.spins = 8;
            } else if (wheelPower == 3) {
                theWheel.animation.spins = 15;
            }

            // Disable the spin button so can't click again while wheel is spinning.
            document.getElementById('spin_button').src = "/Content/img/ruleta/spin_off.png";
            document.getElementById('spin_button').className = "";

            // Begin the spin animation by calling startAnimation on the wheel object.
            theWheel.startAnimation();

            // Set to true so that power can't be changed and spin button re-enabled during
            // the current animation. The user will have to reset before spinning again.
            wheelSpinning = true;
        }
    }

    // -------------------------------------------------------
    // Function for reset button.
    // -------------------------------------------------------
    function resetWheel() {
        theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.
        theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.
        theWheel.draw();                // Call draw to render changes to the wheel.

        document.getElementById('pw1').className = "";  // Remove all colours from the power level indicators.
        document.getElementById('pw2').className = "";
        document.getElementById('pw3').className = "";

        wheelSpinning = false;          // Reset to false to power buttons and spin can be clicked again.
    }

    // -------------------------------------------------------
    // Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters.
    // note the indicated segment is passed in as a parmeter as 99% of the time you will want to know this to inform the user of their prize.
    // -------------------------------------------------------
    function alertPrize(indicatedSegment) {
        // Do basic alert of the segment text. You would probably want to do something more interesting with this information.
        alert("Ganaste " + indicatedSegment.text);
    }</script>