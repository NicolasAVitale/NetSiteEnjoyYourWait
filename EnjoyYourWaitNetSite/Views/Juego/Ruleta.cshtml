@{
    ViewBag.Title = "Ruleta";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/Content/css/ruleta.css" type="text/css" />
<script type="text/javascript" src="~/Scripts/Winwheel.js"></script>
<script type="text/javascript" src="~/Scripts/TweenMax.min.js"></script>

<div class="row">
    <div class="col-sm-4 txt-ruleta">
        <h2>Bienvenido a nuestra @ViewBag.Title</h2>
        <p>Gira la ruleta y obtén un premio</p>
        <div id="premios-obtenidos"></div>
    </div>
    <div width="438" height="582" class="col-sm-8 the_wheel" align="center" valign="center">
        <canvas id="canvas" width="500" height="500" data-responsiveMinWidth="180" data-responsiveScaleHeight="true" onClick="startSpin();">
            <p style="{color: white}" align="center">Lo sentimos, tu navegador no soporta canvas. Proba ingresando desde otro.</p>
        </canvas>
    </div>    
   
</div>
<script>
    // Create winwheel as per normal.
    let theWheel = new Winwheel({
        'numSegments': 8,     // Specify number of segments.
        'textFontSize': 21,    // Set font size as desired.
        'responsive': true,  // This wheel is responsive!
        'segments':        // Define segments including colour and text.
            [
                { 'fillStyle': 'blue', 'text': 'segui participando' },
                { 'fillStyle': 'lightblue', 'text': '10% de descuento' },
                { 'fillStyle': 'green', 'text': 'papas gratis' },
                { 'fillStyle': 'yellow', 'text': 'jugo gratis' },
                { 'fillStyle': 'orange', 'text': 'segui participando' },
                { 'fillStyle': 'red', 'text': '2x1 en helado' },
                { 'fillStyle': 'brown', 'text': 'cubiertos libres' },
                { 'fillStyle': 'violet', 'text': 'cafe gratis' }
            ],
        'pins':
        {
            'outerRadius': 6,
            'responsive': true, // This must be set to true if pin size is to be responsive, if not just location is.
        },
        'animation':           // Specify the animation to use.
        {
            'type': 'spinToStop',
            'duration': 5,     // Duration in seconds.
            'spins': 8,     // Number of complete spins.
            'callbackFinished': alertPrize,
        }
    });

    // -----------------------------------------------------------------
    // Called by the onClick of the canvas, starts the spinning.
    function startSpin() {
        // Stop any current animation.
        theWheel.stopAnimation(false);

        // Reset the rotation angle to less than or equal to 360 so spinning again
        // works as expected. Setting to modulus (%) 360 keeps the current position.
        theWheel.rotationAngle = theWheel.rotationAngle % 360;

        // Start animation.
        theWheel.startAnimation();
        }

    function alertPrize(indicatedSegment) {
        // Do basic alert of the segment text. You would probably want to do something more interesting with this information.
        //alert("Ganaste " + indicatedSegment.text);
        document.getElementById('premios-obtenidos').innerHTML = "Resultado: " + indicatedSegment.text;
    }
</script>